// @generated by protoc-gen-es v1.10.1 with parameter "target=ts"
// @generated from file ironbird.proto (package skip.ironbird, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message skip.ironbird.CreateWorkflowRequest
 */
export class CreateWorkflowRequest extends Message<CreateWorkflowRequest> {
  /**
   * @generated from field: string repo = 1;
   */
  repo = "";

  /**
   * @generated from field: string sha = 2;
   */
  sha = "";

  /**
   * @generated from field: bool isEvmChain = 3;
   */
  isEvmChain = false;

  /**
   * @generated from field: skip.ironbird.ChainConfig chain_config = 4;
   */
  chainConfig?: ChainConfig;

  /**
   * @generated from field: string runner_type = 5;
   */
  runnerType = "";

  /**
   * @generated from field: skip.ironbird.LoadTestSpec cosmos_load_test_spec = 6;
   */
  cosmosLoadTestSpec?: LoadTestSpec;

  /**
   * @generated from field: skip.ironbird.LoadTestSpecEthereum ethereum_load_test_spec = 7;
   */
  ethereumLoadTestSpec?: LoadTestSpecEthereum;

  /**
   * @generated from field: bool long_running_testnet = 8;
   */
  longRunningTestnet = false;

  /**
   * @generated from field: string testnet_duration = 9;
   */
  testnetDuration = "";

  /**
   * @generated from field: int32 num_wallets = 10;
   */
  numWallets = 0;

  /**
   * @generated from field: bool launch_load_balancer = 11;
   */
  launchLoadBalancer = false;

  constructor(data?: PartialMessage<CreateWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.CreateWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "isEvmChain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "chain_config", kind: "message", T: ChainConfig },
    { no: 5, name: "runner_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "cosmos_load_test_spec", kind: "message", T: LoadTestSpec },
    { no: 7, name: "ethereum_load_test_spec", kind: "message", T: LoadTestSpecEthereum },
    { no: 8, name: "long_running_testnet", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "testnet_duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "num_wallets", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 11, name: "launch_load_balancer", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWorkflowRequest {
    return new CreateWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWorkflowRequest {
    return new CreateWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWorkflowRequest {
    return new CreateWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWorkflowRequest | PlainMessage<CreateWorkflowRequest> | undefined, b: CreateWorkflowRequest | PlainMessage<CreateWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(CreateWorkflowRequest, a, b);
  }
}

/**
 * @generated from message skip.ironbird.GenesisKV
 */
export class GenesisKV extends Message<GenesisKV> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<GenesisKV>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.GenesisKV";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisKV {
    return new GenesisKV().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisKV {
    return new GenesisKV().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisKV {
    return new GenesisKV().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisKV | PlainMessage<GenesisKV> | undefined, b: GenesisKV | PlainMessage<GenesisKV> | undefined): boolean {
    return proto3.util.equals(GenesisKV, a, b);
  }
}

/**
 * @generated from message skip.ironbird.RegionConfig
 */
export class RegionConfig extends Message<RegionConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint64 num_of_nodes = 2;
   */
  numOfNodes = protoInt64.zero;

  /**
   * @generated from field: uint64 num_of_validators = 3;
   */
  numOfValidators = protoInt64.zero;

  constructor(data?: PartialMessage<RegionConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.RegionConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "num_of_nodes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "num_of_validators", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegionConfig {
    return new RegionConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegionConfig {
    return new RegionConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegionConfig {
    return new RegionConfig().fromJsonString(jsonString, options);
  }

  static equals(a: RegionConfig | PlainMessage<RegionConfig> | undefined, b: RegionConfig | PlainMessage<RegionConfig> | undefined): boolean {
    return proto3.util.equals(RegionConfig, a, b);
  }
}

/**
 * @generated from message skip.ironbird.ChainConfig
 */
export class ChainConfig extends Message<ChainConfig> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: uint64 num_of_nodes = 2;
   */
  numOfNodes = protoInt64.zero;

  /**
   * @generated from field: uint64 num_of_validators = 3;
   */
  numOfValidators = protoInt64.zero;

  /**
   * @generated from field: repeated skip.ironbird.GenesisKV genesis_modifications = 4;
   */
  genesisModifications: GenesisKV[] = [];

  /**
   * @generated from field: string image = 5;
   */
  image = "";

  /**
   * @generated from field: string custom_app_config = 6;
   */
  customAppConfig = "";

  /**
   * @generated from field: string custom_consensus_config = 7;
   */
  customConsensusConfig = "";

  /**
   * @generated from field: string custom_client_config = 8;
   */
  customClientConfig = "";

  /**
   * @generated from field: bool set_seed_node = 9;
   */
  setSeedNode = false;

  /**
   * @generated from field: bool set_persistent_peers = 10;
   */
  setPersistentPeers = false;

  /**
   * @generated from field: repeated skip.ironbird.RegionConfig region_configs = 11;
   */
  regionConfigs: RegionConfig[] = [];

  constructor(data?: PartialMessage<ChainConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.ChainConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "num_of_nodes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "num_of_validators", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 4, name: "genesis_modifications", kind: "message", T: GenesisKV, repeated: true },
    { no: 5, name: "image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "custom_app_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "custom_consensus_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "custom_client_config", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "set_seed_node", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "set_persistent_peers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "region_configs", kind: "message", T: RegionConfig, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ChainConfig {
    return new ChainConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ChainConfig {
    return new ChainConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ChainConfig {
    return new ChainConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ChainConfig | PlainMessage<ChainConfig> | undefined, b: ChainConfig | PlainMessage<ChainConfig> | undefined): boolean {
    return proto3.util.equals(ChainConfig, a, b);
  }
}

/**
 * @generated from message skip.ironbird.NodeAddress
 */
export class NodeAddress extends Message<NodeAddress> {
  /**
   * @generated from field: string grpc = 1;
   */
  grpc = "";

  /**
   * @generated from field: string rpc = 2;
   */
  rpc = "";

  constructor(data?: PartialMessage<NodeAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.NodeAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "grpc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rpc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NodeAddress {
    return new NodeAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NodeAddress {
    return new NodeAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NodeAddress {
    return new NodeAddress().fromJsonString(jsonString, options);
  }

  static equals(a: NodeAddress | PlainMessage<NodeAddress> | undefined, b: NodeAddress | PlainMessage<NodeAddress> | undefined): boolean {
    return proto3.util.equals(NodeAddress, a, b);
  }
}

/**
 * @generated from message skip.ironbird.LoadTestMsg
 */
export class LoadTestMsg extends Message<LoadTestMsg> {
  /**
   * @generated from field: float weight = 1;
   */
  weight = 0;

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: int32 num_msgs = 3;
   */
  numMsgs = 0;

  /**
   * @generated from field: string contained_type = 4;
   */
  containedType = "";

  /**
   * @generated from field: int32 num_of_recipients = 5;
   */
  numOfRecipients = 0;

  constructor(data?: PartialMessage<LoadTestMsg>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.LoadTestMsg";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "weight", kind: "scalar", T: 2 /* ScalarType.FLOAT */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "num_msgs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "contained_type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "num_of_recipients", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadTestMsg {
    return new LoadTestMsg().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadTestMsg {
    return new LoadTestMsg().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadTestMsg {
    return new LoadTestMsg().fromJsonString(jsonString, options);
  }

  static equals(a: LoadTestMsg | PlainMessage<LoadTestMsg> | undefined, b: LoadTestMsg | PlainMessage<LoadTestMsg> | undefined): boolean {
    return proto3.util.equals(LoadTestMsg, a, b);
  }
}

/**
 * @generated from message skip.ironbird.LoadTestSpec
 */
export class LoadTestSpec extends Message<LoadTestSpec> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * @generated from field: bool isEvmChain = 3;
   */
  isEvmChain = false;

  /**
   * @generated from field: string chain_id = 4;
   */
  chainId = "";

  /**
   * @generated from field: int32 num_of_txs = 5;
   */
  numOfTxs = 0;

  /**
   * @generated from field: int32 num_of_blocks = 6;
   */
  numOfBlocks = 0;

  /**
   * @generated from field: repeated skip.ironbird.NodeAddress nodes_addresses = 7;
   */
  nodesAddresses: NodeAddress[] = [];

  /**
   * @generated from field: repeated string mnemonics = 8;
   */
  mnemonics: string[] = [];

  /**
   * @generated from field: string gas_denom = 9;
   */
  gasDenom = "";

  /**
   * @generated from field: string bech32_prefix = 10;
   */
  bech32Prefix = "";

  /**
   * @generated from field: repeated skip.ironbird.LoadTestMsg msgs = 11;
   */
  msgs: LoadTestMsg[] = [];

  /**
   * @generated from field: bool unordered_txs = 12;
   */
  unorderedTxs = false;

  /**
   * @generated from field: int64 tx_timeout = 13;
   */
  txTimeout = protoInt64.zero;

  constructor(data?: PartialMessage<LoadTestSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.LoadTestSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "isEvmChain", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "num_of_txs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "num_of_blocks", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "nodes_addresses", kind: "message", T: NodeAddress, repeated: true },
    { no: 8, name: "mnemonics", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "gas_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "bech32_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "msgs", kind: "message", T: LoadTestMsg, repeated: true },
    { no: 12, name: "unordered_txs", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "tx_timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadTestSpec {
    return new LoadTestSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadTestSpec {
    return new LoadTestSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadTestSpec {
    return new LoadTestSpec().fromJsonString(jsonString, options);
  }

  static equals(a: LoadTestSpec | PlainMessage<LoadTestSpec> | undefined, b: LoadTestSpec | PlainMessage<LoadTestSpec> | undefined): boolean {
    return proto3.util.equals(LoadTestSpec, a, b);
  }
}

/**
 * LoadTestSpecEthereum represents the configuration for an ethereum load test
 *
 * @generated from message skip.ironbird.LoadTestSpecEthereum
 */
export class LoadTestSpecEthereum extends Message<LoadTestSpecEthereum> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string description = 2;
   */
  description = "";

  /**
   * Using string for big.Int compatibility
   *
   * @generated from field: string chain_id = 3;
   */
  chainId = "";

  /**
   * @generated from field: int32 num_of_txs = 4;
   */
  numOfTxs = 0;

  /**
   * @generated from field: int64 num_of_blocks = 5;
   */
  numOfBlocks = protoInt64.zero;

  /**
   * @generated from field: repeated string nodes_addresses = 6;
   */
  nodesAddresses: string[] = [];

  /**
   * @generated from field: repeated skip.ironbird.LoadTestMsg msgs = 7;
   */
  msgs: LoadTestMsg[] = [];

  /**
   * @generated from field: int64 tx_timeout = 8;
   */
  txTimeout = protoInt64.zero;

  /**
   * @generated from field: repeated string private_keys = 9;
   */
  privateKeys: string[] = [];

  constructor(data?: PartialMessage<LoadTestSpecEthereum>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.LoadTestSpecEthereum";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "chain_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "num_of_txs", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "num_of_blocks", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "nodes_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "msgs", kind: "message", T: LoadTestMsg, repeated: true },
    { no: 8, name: "tx_timeout", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "private_keys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LoadTestSpecEthereum {
    return new LoadTestSpecEthereum().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LoadTestSpecEthereum {
    return new LoadTestSpecEthereum().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LoadTestSpecEthereum {
    return new LoadTestSpecEthereum().fromJsonString(jsonString, options);
  }

  static equals(a: LoadTestSpecEthereum | PlainMessage<LoadTestSpecEthereum> | undefined, b: LoadTestSpecEthereum | PlainMessage<LoadTestSpecEthereum> | undefined): boolean {
    return proto3.util.equals(LoadTestSpecEthereum, a, b);
  }
}

/**
 * @generated from message skip.ironbird.GetWorkflowRequest
 */
export class GetWorkflowRequest extends Message<GetWorkflowRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  constructor(data?: PartialMessage<GetWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.GetWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetWorkflowRequest {
    return new GetWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetWorkflowRequest {
    return new GetWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetWorkflowRequest {
    return new GetWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetWorkflowRequest | PlainMessage<GetWorkflowRequest> | undefined, b: GetWorkflowRequest | PlainMessage<GetWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(GetWorkflowRequest, a, b);
  }
}

/**
 * @generated from message skip.ironbird.ListWorkflowsRequest
 */
export class ListWorkflowsRequest extends Message<ListWorkflowsRequest> {
  /**
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  constructor(data?: PartialMessage<ListWorkflowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.ListWorkflowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWorkflowsRequest {
    return new ListWorkflowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWorkflowsRequest {
    return new ListWorkflowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWorkflowsRequest {
    return new ListWorkflowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWorkflowsRequest | PlainMessage<ListWorkflowsRequest> | undefined, b: ListWorkflowsRequest | PlainMessage<ListWorkflowsRequest> | undefined): boolean {
    return proto3.util.equals(ListWorkflowsRequest, a, b);
  }
}

/**
 * @generated from message skip.ironbird.CancelWorkflowRequest
 */
export class CancelWorkflowRequest extends Message<CancelWorkflowRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  constructor(data?: PartialMessage<CancelWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.CancelWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelWorkflowRequest {
    return new CancelWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelWorkflowRequest {
    return new CancelWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelWorkflowRequest {
    return new CancelWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelWorkflowRequest | PlainMessage<CancelWorkflowRequest> | undefined, b: CancelWorkflowRequest | PlainMessage<CancelWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(CancelWorkflowRequest, a, b);
  }
}

/**
 * @generated from message skip.ironbird.SignalWorkflowRequest
 */
export class SignalWorkflowRequest extends Message<SignalWorkflowRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: string signal_name = 2;
   */
  signalName = "";

  constructor(data?: PartialMessage<SignalWorkflowRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.SignalWorkflowRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "signal_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignalWorkflowRequest {
    return new SignalWorkflowRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignalWorkflowRequest {
    return new SignalWorkflowRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignalWorkflowRequest {
    return new SignalWorkflowRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignalWorkflowRequest | PlainMessage<SignalWorkflowRequest> | undefined, b: SignalWorkflowRequest | PlainMessage<SignalWorkflowRequest> | undefined): boolean {
    return proto3.util.equals(SignalWorkflowRequest, a, b);
  }
}

/**
 * @generated from message skip.ironbird.RunLoadTestRequest
 */
export class RunLoadTestRequest extends Message<RunLoadTestRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: skip.ironbird.LoadTestSpec load_test_spec = 2;
   */
  loadTestSpec?: LoadTestSpec;

  constructor(data?: PartialMessage<RunLoadTestRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.RunLoadTestRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "load_test_spec", kind: "message", T: LoadTestSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunLoadTestRequest {
    return new RunLoadTestRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunLoadTestRequest {
    return new RunLoadTestRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunLoadTestRequest {
    return new RunLoadTestRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunLoadTestRequest | PlainMessage<RunLoadTestRequest> | undefined, b: RunLoadTestRequest | PlainMessage<RunLoadTestRequest> | undefined): boolean {
    return proto3.util.equals(RunLoadTestRequest, a, b);
  }
}

/**
 * @generated from message skip.ironbird.WorkflowResponse
 */
export class WorkflowResponse extends Message<WorkflowResponse> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  constructor(data?: PartialMessage<WorkflowResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.WorkflowResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowResponse {
    return new WorkflowResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowResponse {
    return new WorkflowResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowResponse {
    return new WorkflowResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowResponse | PlainMessage<WorkflowResponse> | undefined, b: WorkflowResponse | PlainMessage<WorkflowResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowResponse, a, b);
  }
}

/**
 * @generated from message skip.ironbird.Node
 */
export class Node extends Message<Node> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * @generated from field: string rpc = 3;
   */
  rpc = "";

  /**
   * @generated from field: string lcd = 4;
   */
  lcd = "";

  /**
   * @generated from field: string grpc = 5;
   */
  grpc = "";

  constructor(data?: PartialMessage<Node>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.Node";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rpc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "lcd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "grpc", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Node {
    return new Node().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Node {
    return new Node().fromJsonString(jsonString, options);
  }

  static equals(a: Node | PlainMessage<Node> | undefined, b: Node | PlainMessage<Node> | undefined): boolean {
    return proto3.util.equals(Node, a, b);
  }
}

/**
 * @generated from message skip.ironbird.WalletInfo
 */
export class WalletInfo extends Message<WalletInfo> {
  /**
   * @generated from field: string faucet_address = 1;
   */
  faucetAddress = "";

  /**
   * @generated from field: string faucet_mnemonic = 2;
   */
  faucetMnemonic = "";

  /**
   * @generated from field: repeated string user_addresses = 3;
   */
  userAddresses: string[] = [];

  /**
   * @generated from field: repeated string user_mnemonics = 4;
   */
  userMnemonics: string[] = [];

  constructor(data?: PartialMessage<WalletInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.WalletInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "faucet_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "faucet_mnemonic", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "user_mnemonics", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WalletInfo {
    return new WalletInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WalletInfo {
    return new WalletInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WalletInfo {
    return new WalletInfo().fromJsonString(jsonString, options);
  }

  static equals(a: WalletInfo | PlainMessage<WalletInfo> | undefined, b: WalletInfo | PlainMessage<WalletInfo> | undefined): boolean {
    return proto3.util.equals(WalletInfo, a, b);
  }
}

/**
 * @generated from message skip.ironbird.Workflow
 */
export class Workflow extends Message<Workflow> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * @generated from field: repeated skip.ironbird.Node nodes = 3;
   */
  nodes: Node[] = [];

  /**
   * @generated from field: repeated skip.ironbird.Node validators = 4;
   */
  validators: Node[] = [];

  /**
   * @generated from field: repeated skip.ironbird.Node load_balancers = 5;
   */
  loadBalancers: Node[] = [];

  /**
   * @generated from field: map<string, string> monitoring = 6;
   */
  monitoring: { [key: string]: string } = {};

  /**
   * @generated from field: skip.ironbird.CreateWorkflowRequest config = 7;
   */
  config?: CreateWorkflowRequest;

  /**
   * @generated from field: skip.ironbird.LoadTestSpec load_test_spec = 17;
   */
  loadTestSpec?: LoadTestSpec;

  /**
   * @generated from field: skip.ironbird.WalletInfo wallets = 18;
   */
  wallets?: WalletInfo;

  /**
   * @generated from field: string provider = 19;
   */
  provider = "";

  constructor(data?: PartialMessage<Workflow>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.Workflow";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nodes", kind: "message", T: Node, repeated: true },
    { no: 4, name: "validators", kind: "message", T: Node, repeated: true },
    { no: 5, name: "load_balancers", kind: "message", T: Node, repeated: true },
    { no: 6, name: "monitoring", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 7, name: "config", kind: "message", T: CreateWorkflowRequest },
    { no: 17, name: "load_test_spec", kind: "message", T: LoadTestSpec },
    { no: 18, name: "wallets", kind: "message", T: WalletInfo },
    { no: 19, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Workflow {
    return new Workflow().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Workflow {
    return new Workflow().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Workflow {
    return new Workflow().fromJsonString(jsonString, options);
  }

  static equals(a: Workflow | PlainMessage<Workflow> | undefined, b: Workflow | PlainMessage<Workflow> | undefined): boolean {
    return proto3.util.equals(Workflow, a, b);
  }
}

/**
 * @generated from message skip.ironbird.WorkflowSummary
 */
export class WorkflowSummary extends Message<WorkflowSummary> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: string status = 2;
   */
  status = "";

  /**
   * @generated from field: string start_time = 3;
   */
  startTime = "";

  /**
   * @generated from field: string repo = 4;
   */
  repo = "";

  /**
   * @generated from field: string sha = 5;
   */
  sha = "";

  /**
   * @generated from field: string provider = 6;
   */
  provider = "";

  constructor(data?: PartialMessage<WorkflowSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.WorkflowSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "status", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowSummary {
    return new WorkflowSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowSummary {
    return new WorkflowSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowSummary {
    return new WorkflowSummary().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowSummary | PlainMessage<WorkflowSummary> | undefined, b: WorkflowSummary | PlainMessage<WorkflowSummary> | undefined): boolean {
    return proto3.util.equals(WorkflowSummary, a, b);
  }
}

/**
 * @generated from message skip.ironbird.UpdateWorkflowDataRequest
 */
export class UpdateWorkflowDataRequest extends Message<UpdateWorkflowDataRequest> {
  /**
   * @generated from field: string workflow_id = 1;
   */
  workflowId = "";

  /**
   * @generated from field: repeated skip.ironbird.Node load_balancers = 2;
   */
  loadBalancers: Node[] = [];

  /**
   * @generated from field: map<string, string> monitoring = 3;
   */
  monitoring: { [key: string]: string } = {};

  /**
   * @generated from field: repeated skip.ironbird.Node nodes = 4;
   */
  nodes: Node[] = [];

  /**
   * @generated from field: repeated skip.ironbird.Node validators = 5;
   */
  validators: Node[] = [];

  /**
   * @generated from field: skip.ironbird.WalletInfo wallets = 6;
   */
  wallets?: WalletInfo;

  /**
   * @generated from field: string provider = 7;
   */
  provider = "";

  constructor(data?: PartialMessage<UpdateWorkflowDataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.UpdateWorkflowDataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflow_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "load_balancers", kind: "message", T: Node, repeated: true },
    { no: 3, name: "monitoring", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 4, name: "nodes", kind: "message", T: Node, repeated: true },
    { no: 5, name: "validators", kind: "message", T: Node, repeated: true },
    { no: 6, name: "wallets", kind: "message", T: WalletInfo },
    { no: 7, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateWorkflowDataRequest {
    return new UpdateWorkflowDataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateWorkflowDataRequest {
    return new UpdateWorkflowDataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateWorkflowDataRequest {
    return new UpdateWorkflowDataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateWorkflowDataRequest | PlainMessage<UpdateWorkflowDataRequest> | undefined, b: UpdateWorkflowDataRequest | PlainMessage<UpdateWorkflowDataRequest> | undefined): boolean {
    return proto3.util.equals(UpdateWorkflowDataRequest, a, b);
  }
}

/**
 * @generated from message skip.ironbird.WorkflowListResponse
 */
export class WorkflowListResponse extends Message<WorkflowListResponse> {
  /**
   * @generated from field: repeated skip.ironbird.WorkflowSummary workflows = 1;
   */
  workflows: WorkflowSummary[] = [];

  /**
   * @generated from field: int32 count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<WorkflowListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "skip.ironbird.WorkflowListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "workflows", kind: "message", T: WorkflowSummary, repeated: true },
    { no: 2, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WorkflowListResponse {
    return new WorkflowListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WorkflowListResponse {
    return new WorkflowListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WorkflowListResponse {
    return new WorkflowListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WorkflowListResponse | PlainMessage<WorkflowListResponse> | undefined, b: WorkflowListResponse | PlainMessage<WorkflowListResponse> | undefined): boolean {
    return proto3.util.equals(WorkflowListResponse, a, b);
  }
}

