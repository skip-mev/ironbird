// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: server/proto/ironbird.proto

package ironbird

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Repo               string        `protobuf:"bytes,1,opt,name=repo,proto3" json:"repo,omitempty"`
	Sha                string        `protobuf:"bytes,2,opt,name=sha,proto3" json:"sha,omitempty"`
	IsEvmChain         bool          `protobuf:"varint,3,opt,name=isEvmChain,proto3" json:"isEvmChain,omitempty"`
	ChainConfig        *ChainConfig  `protobuf:"bytes,4,opt,name=chain_config,json=chainConfig,proto3" json:"chain_config,omitempty"`
	RunnerType         string        `protobuf:"bytes,5,opt,name=runner_type,json=runnerType,proto3" json:"runner_type,omitempty"`
	LoadTestSpec       *LoadTestSpec `protobuf:"bytes,6,opt,name=load_test_spec,json=loadTestSpec,proto3" json:"load_test_spec,omitempty"`
	LongRunningTestnet bool          `protobuf:"varint,7,opt,name=long_running_testnet,json=longRunningTestnet,proto3" json:"long_running_testnet,omitempty"`
	TestnetDuration    int64         `protobuf:"varint,8,opt,name=testnet_duration,json=testnetDuration,proto3" json:"testnet_duration,omitempty"`
	NumWallets         int32         `protobuf:"varint,9,opt,name=num_wallets,json=numWallets,proto3" json:"num_wallets,omitempty"`
}

func (x *CreateWorkflowRequest) Reset() {
	*x = CreateWorkflowRequest{}
	mi := &file_server_proto_ironbird_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkflowRequest) ProtoMessage() {}

func (x *CreateWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{0}
}

func (x *CreateWorkflowRequest) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *CreateWorkflowRequest) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

func (x *CreateWorkflowRequest) GetIsEvmChain() bool {
	if x != nil {
		return x.IsEvmChain
	}
	return false
}

func (x *CreateWorkflowRequest) GetChainConfig() *ChainConfig {
	if x != nil {
		return x.ChainConfig
	}
	return nil
}

func (x *CreateWorkflowRequest) GetRunnerType() string {
	if x != nil {
		return x.RunnerType
	}
	return ""
}

func (x *CreateWorkflowRequest) GetLoadTestSpec() *LoadTestSpec {
	if x != nil {
		return x.LoadTestSpec
	}
	return nil
}

func (x *CreateWorkflowRequest) GetLongRunningTestnet() bool {
	if x != nil {
		return x.LongRunningTestnet
	}
	return false
}

func (x *CreateWorkflowRequest) GetTestnetDuration() int64 {
	if x != nil {
		return x.TestnetDuration
	}
	return 0
}

func (x *CreateWorkflowRequest) GetNumWallets() int32 {
	if x != nil {
		return x.NumWallets
	}
	return 0
}

type GenesisKV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GenesisKV) Reset() {
	*x = GenesisKV{}
	mi := &file_server_proto_ironbird_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenesisKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisKV) ProtoMessage() {}

func (x *GenesisKV) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisKV.ProtoReflect.Descriptor instead.
func (*GenesisKV) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{1}
}

func (x *GenesisKV) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *GenesisKV) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ChainConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	NumOfNodes           uint64       `protobuf:"varint,2,opt,name=num_of_nodes,json=numOfNodes,proto3" json:"num_of_nodes,omitempty"`
	NumOfValidators      uint64       `protobuf:"varint,3,opt,name=num_of_validators,json=numOfValidators,proto3" json:"num_of_validators,omitempty"`
	GenesisModifications []*GenesisKV `protobuf:"bytes,4,rep,name=genesis_modifications,json=genesisModifications,proto3" json:"genesis_modifications,omitempty"`
	Image                string       `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *ChainConfig) Reset() {
	*x = ChainConfig{}
	mi := &file_server_proto_ironbird_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChainConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainConfig) ProtoMessage() {}

func (x *ChainConfig) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainConfig.ProtoReflect.Descriptor instead.
func (*ChainConfig) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{2}
}

func (x *ChainConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChainConfig) GetNumOfNodes() uint64 {
	if x != nil {
		return x.NumOfNodes
	}
	return 0
}

func (x *ChainConfig) GetNumOfValidators() uint64 {
	if x != nil {
		return x.NumOfValidators
	}
	return 0
}

func (x *ChainConfig) GetGenesisModifications() []*GenesisKV {
	if x != nil {
		return x.GenesisModifications
	}
	return nil
}

func (x *ChainConfig) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type NodeAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grpc string `protobuf:"bytes,1,opt,name=grpc,proto3" json:"grpc,omitempty"`
	Rpc  string `protobuf:"bytes,2,opt,name=rpc,proto3" json:"rpc,omitempty"`
}

func (x *NodeAddress) Reset() {
	*x = NodeAddress{}
	mi := &file_server_proto_ironbird_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeAddress) ProtoMessage() {}

func (x *NodeAddress) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeAddress.ProtoReflect.Descriptor instead.
func (*NodeAddress) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{3}
}

func (x *NodeAddress) GetGrpc() string {
	if x != nil {
		return x.Grpc
	}
	return ""
}

func (x *NodeAddress) GetRpc() string {
	if x != nil {
		return x.Rpc
	}
	return ""
}

type LoadTestMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weight          float32 `protobuf:"fixed32,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Type            string  `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	NumMsgs         int32   `protobuf:"varint,3,opt,name=num_msgs,json=numMsgs,proto3" json:"num_msgs,omitempty"`
	ContainedType   string  `protobuf:"bytes,4,opt,name=contained_type,json=containedType,proto3" json:"contained_type,omitempty"`
	NumOfRecipients int32   `protobuf:"varint,5,opt,name=num_of_recipients,json=numOfRecipients,proto3" json:"num_of_recipients,omitempty"`
}

func (x *LoadTestMsg) Reset() {
	*x = LoadTestMsg{}
	mi := &file_server_proto_ironbird_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadTestMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTestMsg) ProtoMessage() {}

func (x *LoadTestMsg) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTestMsg.ProtoReflect.Descriptor instead.
func (*LoadTestMsg) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{4}
}

func (x *LoadTestMsg) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *LoadTestMsg) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LoadTestMsg) GetNumMsgs() int32 {
	if x != nil {
		return x.NumMsgs
	}
	return 0
}

func (x *LoadTestMsg) GetContainedType() string {
	if x != nil {
		return x.ContainedType
	}
	return ""
}

func (x *LoadTestMsg) GetNumOfRecipients() int32 {
	if x != nil {
		return x.NumOfRecipients
	}
	return 0
}

type LoadTestSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description    string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IsEvmChain     bool           `protobuf:"varint,3,opt,name=isEvmChain,proto3" json:"isEvmChain,omitempty"`
	ChainId        string         `protobuf:"bytes,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	NumOfTxs       int32          `protobuf:"varint,5,opt,name=num_of_txs,json=numOfTxs,proto3" json:"num_of_txs,omitempty"`
	NumOfBlocks    int32          `protobuf:"varint,6,opt,name=num_of_blocks,json=numOfBlocks,proto3" json:"num_of_blocks,omitempty"`
	NodesAddresses []*NodeAddress `protobuf:"bytes,7,rep,name=nodes_addresses,json=nodesAddresses,proto3" json:"nodes_addresses,omitempty"`
	Mnemonics      []string       `protobuf:"bytes,8,rep,name=mnemonics,proto3" json:"mnemonics,omitempty"`
	GasDenom       string         `protobuf:"bytes,9,opt,name=gas_denom,json=gasDenom,proto3" json:"gas_denom,omitempty"`
	Bech32Prefix   string         `protobuf:"bytes,10,opt,name=bech32_prefix,json=bech32Prefix,proto3" json:"bech32_prefix,omitempty"`
	Msgs           []*LoadTestMsg `protobuf:"bytes,11,rep,name=msgs,proto3" json:"msgs,omitempty"`
	UnorderedTxs   bool           `protobuf:"varint,12,opt,name=unordered_txs,json=unorderedTxs,proto3" json:"unordered_txs,omitempty"`
	TxTimeout      int64          `protobuf:"varint,13,opt,name=tx_timeout,json=txTimeout,proto3" json:"tx_timeout,omitempty"`
}

func (x *LoadTestSpec) Reset() {
	*x = LoadTestSpec{}
	mi := &file_server_proto_ironbird_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoadTestSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoadTestSpec) ProtoMessage() {}

func (x *LoadTestSpec) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoadTestSpec.ProtoReflect.Descriptor instead.
func (*LoadTestSpec) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{5}
}

func (x *LoadTestSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LoadTestSpec) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *LoadTestSpec) GetIsEvmChain() bool {
	if x != nil {
		return x.IsEvmChain
	}
	return false
}

func (x *LoadTestSpec) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *LoadTestSpec) GetNumOfTxs() int32 {
	if x != nil {
		return x.NumOfTxs
	}
	return 0
}

func (x *LoadTestSpec) GetNumOfBlocks() int32 {
	if x != nil {
		return x.NumOfBlocks
	}
	return 0
}

func (x *LoadTestSpec) GetNodesAddresses() []*NodeAddress {
	if x != nil {
		return x.NodesAddresses
	}
	return nil
}

func (x *LoadTestSpec) GetMnemonics() []string {
	if x != nil {
		return x.Mnemonics
	}
	return nil
}

func (x *LoadTestSpec) GetGasDenom() string {
	if x != nil {
		return x.GasDenom
	}
	return ""
}

func (x *LoadTestSpec) GetBech32Prefix() string {
	if x != nil {
		return x.Bech32Prefix
	}
	return ""
}

func (x *LoadTestSpec) GetMsgs() []*LoadTestMsg {
	if x != nil {
		return x.Msgs
	}
	return nil
}

func (x *LoadTestSpec) GetUnorderedTxs() bool {
	if x != nil {
		return x.UnorderedTxs
	}
	return false
}

func (x *LoadTestSpec) GetTxTimeout() int64 {
	if x != nil {
		return x.TxTimeout
	}
	return 0
}

type GetWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *GetWorkflowRequest) Reset() {
	*x = GetWorkflowRequest{}
	mi := &file_server_proto_ironbird_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWorkflowRequest) ProtoMessage() {}

func (x *GetWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWorkflowRequest.ProtoReflect.Descriptor instead.
func (*GetWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{6}
}

func (x *GetWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type ListWorkflowsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *ListWorkflowsRequest) Reset() {
	*x = ListWorkflowsRequest{}
	mi := &file_server_proto_ironbird_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListWorkflowsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkflowsRequest) ProtoMessage() {}

func (x *ListWorkflowsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkflowsRequest.ProtoReflect.Descriptor instead.
func (*ListWorkflowsRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{7}
}

func (x *ListWorkflowsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListWorkflowsRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type CancelWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *CancelWorkflowRequest) Reset() {
	*x = CancelWorkflowRequest{}
	mi := &file_server_proto_ironbird_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CancelWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelWorkflowRequest) ProtoMessage() {}

func (x *CancelWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelWorkflowRequest.ProtoReflect.Descriptor instead.
func (*CancelWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{8}
}

func (x *CancelWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type SignalWorkflowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	SignalName string `protobuf:"bytes,2,opt,name=signal_name,json=signalName,proto3" json:"signal_name,omitempty"`
}

func (x *SignalWorkflowRequest) Reset() {
	*x = SignalWorkflowRequest{}
	mi := &file_server_proto_ironbird_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignalWorkflowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalWorkflowRequest) ProtoMessage() {}

func (x *SignalWorkflowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalWorkflowRequest.ProtoReflect.Descriptor instead.
func (*SignalWorkflowRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{9}
}

func (x *SignalWorkflowRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *SignalWorkflowRequest) GetSignalName() string {
	if x != nil {
		return x.SignalName
	}
	return ""
}

type RunLoadTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId   string        `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	LoadTestSpec *LoadTestSpec `protobuf:"bytes,2,opt,name=load_test_spec,json=loadTestSpec,proto3" json:"load_test_spec,omitempty"`
}

func (x *RunLoadTestRequest) Reset() {
	*x = RunLoadTestRequest{}
	mi := &file_server_proto_ironbird_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunLoadTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunLoadTestRequest) ProtoMessage() {}

func (x *RunLoadTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunLoadTestRequest.ProtoReflect.Descriptor instead.
func (*RunLoadTestRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{10}
}

func (x *RunLoadTestRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *RunLoadTestRequest) GetLoadTestSpec() *LoadTestSpec {
	if x != nil {
		return x.LoadTestSpec
	}
	return nil
}

type WorkflowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
}

func (x *WorkflowResponse) Reset() {
	*x = WorkflowResponse{}
	mi := &file_server_proto_ironbird_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowResponse) ProtoMessage() {}

func (x *WorkflowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowResponse.ProtoReflect.Descriptor instead.
func (*WorkflowResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{11}
}

func (x *WorkflowResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Rpc     string `protobuf:"bytes,3,opt,name=rpc,proto3" json:"rpc,omitempty"`
	Lcd     string `protobuf:"bytes,4,opt,name=lcd,proto3" json:"lcd,omitempty"`
	Grpc    string `protobuf:"bytes,5,opt,name=grpc,proto3" json:"grpc,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_server_proto_ironbird_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{12}
}

func (x *Node) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Node) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Node) GetRpc() string {
	if x != nil {
		return x.Rpc
	}
	return ""
}

func (x *Node) GetLcd() string {
	if x != nil {
		return x.Lcd
	}
	return ""
}

func (x *Node) GetGrpc() string {
	if x != nil {
		return x.Grpc
	}
	return ""
}

type WalletInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaucetAddress  string   `protobuf:"bytes,1,opt,name=faucet_address,json=faucetAddress,proto3" json:"faucet_address,omitempty"`
	FaucetMnemonic string   `protobuf:"bytes,2,opt,name=faucet_mnemonic,json=faucetMnemonic,proto3" json:"faucet_mnemonic,omitempty"`
	UserAddresses  []string `protobuf:"bytes,3,rep,name=user_addresses,json=userAddresses,proto3" json:"user_addresses,omitempty"`
	UserMnemonics  []string `protobuf:"bytes,4,rep,name=user_mnemonics,json=userMnemonics,proto3" json:"user_mnemonics,omitempty"`
}

func (x *WalletInfo) Reset() {
	*x = WalletInfo{}
	mi := &file_server_proto_ironbird_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WalletInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WalletInfo) ProtoMessage() {}

func (x *WalletInfo) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WalletInfo.ProtoReflect.Descriptor instead.
func (*WalletInfo) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{13}
}

func (x *WalletInfo) GetFaucetAddress() string {
	if x != nil {
		return x.FaucetAddress
	}
	return ""
}

func (x *WalletInfo) GetFaucetMnemonic() string {
	if x != nil {
		return x.FaucetMnemonic
	}
	return ""
}

func (x *WalletInfo) GetUserAddresses() []string {
	if x != nil {
		return x.UserAddresses
	}
	return nil
}

func (x *WalletInfo) GetUserMnemonics() []string {
	if x != nil {
		return x.UserMnemonics
	}
	return nil
}

type Workflow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId    string                 `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Nodes         []*Node                `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Validators    []*Node                `protobuf:"bytes,4,rep,name=validators,proto3" json:"validators,omitempty"`
	LoadBalancers []*Node                `protobuf:"bytes,5,rep,name=load_balancers,json=loadBalancers,proto3" json:"load_balancers,omitempty"`
	Monitoring    map[string]string      `protobuf:"bytes,6,rep,name=monitoring,proto3" json:"monitoring,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Config        *CreateWorkflowRequest `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	Explorer      *string                `protobuf:"bytes,8,opt,name=explorer,proto3,oneof" json:"explorer,omitempty"`
	LoadTestSpec  *LoadTestSpec          `protobuf:"bytes,17,opt,name=load_test_spec,json=loadTestSpec,proto3" json:"load_test_spec,omitempty"`
	Wallets       *WalletInfo            `protobuf:"bytes,18,opt,name=wallets,proto3" json:"wallets,omitempty"`
}

func (x *Workflow) Reset() {
	*x = Workflow{}
	mi := &file_server_proto_ironbird_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Workflow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workflow) ProtoMessage() {}

func (x *Workflow) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workflow.ProtoReflect.Descriptor instead.
func (*Workflow) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{14}
}

func (x *Workflow) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *Workflow) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Workflow) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Workflow) GetValidators() []*Node {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *Workflow) GetLoadBalancers() []*Node {
	if x != nil {
		return x.LoadBalancers
	}
	return nil
}

func (x *Workflow) GetMonitoring() map[string]string {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

func (x *Workflow) GetConfig() *CreateWorkflowRequest {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Workflow) GetExplorer() string {
	if x != nil && x.Explorer != nil {
		return *x.Explorer
	}
	return ""
}

func (x *Workflow) GetLoadTestSpec() *LoadTestSpec {
	if x != nil {
		return x.LoadTestSpec
	}
	return nil
}

func (x *Workflow) GetWallets() *WalletInfo {
	if x != nil {
		return x.Wallets
	}
	return nil
}

type WorkflowSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId string `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	Status     string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	StartTime  string `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	Repo       string `protobuf:"bytes,4,opt,name=repo,proto3" json:"repo,omitempty"`
	Sha        string `protobuf:"bytes,5,opt,name=sha,proto3" json:"sha,omitempty"`
}

func (x *WorkflowSummary) Reset() {
	*x = WorkflowSummary{}
	mi := &file_server_proto_ironbird_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowSummary) ProtoMessage() {}

func (x *WorkflowSummary) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowSummary.ProtoReflect.Descriptor instead.
func (*WorkflowSummary) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{15}
}

func (x *WorkflowSummary) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *WorkflowSummary) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *WorkflowSummary) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *WorkflowSummary) GetRepo() string {
	if x != nil {
		return x.Repo
	}
	return ""
}

func (x *WorkflowSummary) GetSha() string {
	if x != nil {
		return x.Sha
	}
	return ""
}

type UpdateWorkflowDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkflowId    string            `protobuf:"bytes,1,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	LoadBalancers []*Node           `protobuf:"bytes,2,rep,name=load_balancers,json=loadBalancers,proto3" json:"load_balancers,omitempty"`
	Monitoring    map[string]string `protobuf:"bytes,3,rep,name=monitoring,proto3" json:"monitoring,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nodes         []*Node           `protobuf:"bytes,4,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Validators    []*Node           `protobuf:"bytes,5,rep,name=validators,proto3" json:"validators,omitempty"`
	Wallets       *WalletInfo       `protobuf:"bytes,6,opt,name=wallets,proto3" json:"wallets,omitempty"`
	Explorer      *string           `protobuf:"bytes,7,opt,name=explorer,proto3,oneof" json:"explorer,omitempty"`
}

func (x *UpdateWorkflowDataRequest) Reset() {
	*x = UpdateWorkflowDataRequest{}
	mi := &file_server_proto_ironbird_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWorkflowDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWorkflowDataRequest) ProtoMessage() {}

func (x *UpdateWorkflowDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWorkflowDataRequest.ProtoReflect.Descriptor instead.
func (*UpdateWorkflowDataRequest) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateWorkflowDataRequest) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *UpdateWorkflowDataRequest) GetLoadBalancers() []*Node {
	if x != nil {
		return x.LoadBalancers
	}
	return nil
}

func (x *UpdateWorkflowDataRequest) GetMonitoring() map[string]string {
	if x != nil {
		return x.Monitoring
	}
	return nil
}

func (x *UpdateWorkflowDataRequest) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *UpdateWorkflowDataRequest) GetValidators() []*Node {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *UpdateWorkflowDataRequest) GetWallets() *WalletInfo {
	if x != nil {
		return x.Wallets
	}
	return nil
}

func (x *UpdateWorkflowDataRequest) GetExplorer() string {
	if x != nil && x.Explorer != nil {
		return *x.Explorer
	}
	return ""
}

type WorkflowListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workflows []*WorkflowSummary `protobuf:"bytes,1,rep,name=workflows,proto3" json:"workflows,omitempty"`
	Count     int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *WorkflowListResponse) Reset() {
	*x = WorkflowListResponse{}
	mi := &file_server_proto_ironbird_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkflowListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkflowListResponse) ProtoMessage() {}

func (x *WorkflowListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_proto_ironbird_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkflowListResponse.ProtoReflect.Descriptor instead.
func (*WorkflowListResponse) Descriptor() ([]byte, []int) {
	return file_server_proto_ironbird_proto_rawDescGZIP(), []int{17}
}

func (x *WorkflowListResponse) GetWorkflows() []*WorkflowSummary {
	if x != nil {
		return x.Workflows
	}
	return nil
}

func (x *WorkflowListResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_server_proto_ironbird_proto protoreflect.FileDescriptor

var file_server_proto_ironbird_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69,
	0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x73,
	0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x22, 0xfe, 0x02, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x68,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68, 0x61, 0x12, 0x1e, 0x0a, 0x0a,
	0x69, 0x73, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x69, 0x73, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x3d, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69,
	0x72, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b,
	0x63, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x75, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e,
	0x62, 0x69, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x30, 0x0a, 0x14, 0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x6c,
	0x6f, 0x6e, 0x67, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x6e, 0x65,
	0x74, 0x12, 0x29, 0x0a, 0x10, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x74, 0x65, 0x73,
	0x74, 0x6e, 0x65, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x6e, 0x75, 0x6d, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x33, 0x0a,
	0x09, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x56, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xd4, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66,
	0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x4f, 0x66, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x66, 0x5f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x4d, 0x0a, 0x15, 0x67, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x5f,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62,
	0x69, 0x72, 0x64, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4b, 0x56, 0x52, 0x14, 0x67,
	0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x0b, 0x4e, 0x6f, 0x64,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x72, 0x70, 0x63, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x70, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x70, 0x63, 0x22, 0xa7,
	0x01, 0x0a, 0x0b, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75,
	0x6d, 0x5f, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6e, 0x75,
	0x6d, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x52, 0x65,
	0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x0c, 0x4c, 0x6f, 0x61,
	0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x45, 0x76, 0x6d, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x0a, 0x6e, 0x75,
	0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x78, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x54, 0x78, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f,
	0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x4f, 0x66, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x43, 0x0a, 0x0f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f,
	0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x0e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x12,
	0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x67, 0x61, 0x73, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x23, 0x0a, 0x0d,
	0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x12, 0x2e, 0x0a, 0x04, 0x6d, 0x73, 0x67, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e,
	0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x73, 0x67, 0x52, 0x04, 0x6d, 0x73, 0x67,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x5f, 0x74,
	0x78, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x65, 0x64, 0x54, 0x78, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x78, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x44, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x22, 0x38, 0x0a, 0x15, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x15,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x6c,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x78, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x4c, 0x6f,
	0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x41,
	0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72,
	0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65,
	0x63, 0x22, 0x33, 0x0a, 0x10, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x70, 0x63, 0x12, 0x10,
	0x0a, 0x03, 0x6c, 0x63, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x63, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x72, 0x70, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x72, 0x70, 0x63, 0x22, 0xaa, 0x01, 0x0a, 0x0a, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x75,
	0x63, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x66, 0x61,
	0x75, 0x63, 0x65, 0x74, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x61, 0x75, 0x63, 0x65, 0x74, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0d, 0x75, 0x73, 0x65, 0x72, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x73, 0x22, 0xcb, 0x04, 0x0a, 0x08, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x1f,
	0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72,
	0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72,
	0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x72, 0x73, 0x12, 0x47, 0x0a, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69,
	0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x78,
	0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x0e, 0x6c,
	0x6f, 0x61, 0x64, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62,
	0x69, 0x72, 0x64, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x0c, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x33,
	0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e,
	0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x22,
	0x8f, 0x01, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x65, 0x70, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x65, 0x70, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x73, 0x68, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x68,
	0x61, 0x22, 0xd4, 0x03, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x0e, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e,
	0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0d, 0x6c,
	0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x73, 0x12, 0x58, 0x0a, 0x0a,
	0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x6f, 0x6e, 0x69, 0x74,
	0x6f, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x6d, 0x6f, 0x6e, 0x69,
	0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f,
	0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x33, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f,
	0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69,
	0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x08, 0x65,
	0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x08, 0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a, 0x0f,
	0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f,
	0x65, 0x78, 0x70, 0x6c, 0x6f, 0x72, 0x65, 0x72, 0x22, 0x6a, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62,
	0x69, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x84, 0x05, 0x0a, 0x0f, 0x49, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x2e, 0x73, 0x6b, 0x69,
	0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x12, 0x21, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69,
	0x72, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f,
	0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x12, 0x23, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72,
	0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72,
	0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a,
	0x0e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x24, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f,
	0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x2e, 0x73, 0x6b, 0x69,
	0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65,
	0x73, 0x74, 0x12, 0x21, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69,
	0x72, 0x64, 0x2e, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f,
	0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x28,
	0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x73, 0x6b, 0x69, 0x70, 0x2e,
	0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x32, 0x5a, 0x30, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6b, 0x69, 0x70, 0x2d, 0x6d,
	0x65, 0x76, 0x2f, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x2f, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x69, 0x72, 0x6f, 0x6e, 0x62, 0x69, 0x72, 0x64, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_proto_ironbird_proto_rawDescOnce sync.Once
	file_server_proto_ironbird_proto_rawDescData = file_server_proto_ironbird_proto_rawDesc
)

func file_server_proto_ironbird_proto_rawDescGZIP() []byte {
	file_server_proto_ironbird_proto_rawDescOnce.Do(func() {
		file_server_proto_ironbird_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_proto_ironbird_proto_rawDescData)
	})
	return file_server_proto_ironbird_proto_rawDescData
}

var file_server_proto_ironbird_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_server_proto_ironbird_proto_goTypes = []any{
	(*CreateWorkflowRequest)(nil),     // 0: skip.ironbird.CreateWorkflowRequest
	(*GenesisKV)(nil),                 // 1: skip.ironbird.GenesisKV
	(*ChainConfig)(nil),               // 2: skip.ironbird.ChainConfig
	(*NodeAddress)(nil),               // 3: skip.ironbird.NodeAddress
	(*LoadTestMsg)(nil),               // 4: skip.ironbird.LoadTestMsg
	(*LoadTestSpec)(nil),              // 5: skip.ironbird.LoadTestSpec
	(*GetWorkflowRequest)(nil),        // 6: skip.ironbird.GetWorkflowRequest
	(*ListWorkflowsRequest)(nil),      // 7: skip.ironbird.ListWorkflowsRequest
	(*CancelWorkflowRequest)(nil),     // 8: skip.ironbird.CancelWorkflowRequest
	(*SignalWorkflowRequest)(nil),     // 9: skip.ironbird.SignalWorkflowRequest
	(*RunLoadTestRequest)(nil),        // 10: skip.ironbird.RunLoadTestRequest
	(*WorkflowResponse)(nil),          // 11: skip.ironbird.WorkflowResponse
	(*Node)(nil),                      // 12: skip.ironbird.Node
	(*WalletInfo)(nil),                // 13: skip.ironbird.WalletInfo
	(*Workflow)(nil),                  // 14: skip.ironbird.Workflow
	(*WorkflowSummary)(nil),           // 15: skip.ironbird.WorkflowSummary
	(*UpdateWorkflowDataRequest)(nil), // 16: skip.ironbird.UpdateWorkflowDataRequest
	(*WorkflowListResponse)(nil),      // 17: skip.ironbird.WorkflowListResponse
	nil,                               // 18: skip.ironbird.Workflow.MonitoringEntry
	nil,                               // 19: skip.ironbird.UpdateWorkflowDataRequest.MonitoringEntry
}
var file_server_proto_ironbird_proto_depIdxs = []int32{
	2,  // 0: skip.ironbird.CreateWorkflowRequest.chain_config:type_name -> skip.ironbird.ChainConfig
	5,  // 1: skip.ironbird.CreateWorkflowRequest.load_test_spec:type_name -> skip.ironbird.LoadTestSpec
	1,  // 2: skip.ironbird.ChainConfig.genesis_modifications:type_name -> skip.ironbird.GenesisKV
	3,  // 3: skip.ironbird.LoadTestSpec.nodes_addresses:type_name -> skip.ironbird.NodeAddress
	4,  // 4: skip.ironbird.LoadTestSpec.msgs:type_name -> skip.ironbird.LoadTestMsg
	5,  // 5: skip.ironbird.RunLoadTestRequest.load_test_spec:type_name -> skip.ironbird.LoadTestSpec
	12, // 6: skip.ironbird.Workflow.nodes:type_name -> skip.ironbird.Node
	12, // 7: skip.ironbird.Workflow.validators:type_name -> skip.ironbird.Node
	12, // 8: skip.ironbird.Workflow.load_balancers:type_name -> skip.ironbird.Node
	18, // 9: skip.ironbird.Workflow.monitoring:type_name -> skip.ironbird.Workflow.MonitoringEntry
	0,  // 10: skip.ironbird.Workflow.config:type_name -> skip.ironbird.CreateWorkflowRequest
	5,  // 11: skip.ironbird.Workflow.load_test_spec:type_name -> skip.ironbird.LoadTestSpec
	13, // 12: skip.ironbird.Workflow.wallets:type_name -> skip.ironbird.WalletInfo
	12, // 13: skip.ironbird.UpdateWorkflowDataRequest.load_balancers:type_name -> skip.ironbird.Node
	19, // 14: skip.ironbird.UpdateWorkflowDataRequest.monitoring:type_name -> skip.ironbird.UpdateWorkflowDataRequest.MonitoringEntry
	12, // 15: skip.ironbird.UpdateWorkflowDataRequest.nodes:type_name -> skip.ironbird.Node
	12, // 16: skip.ironbird.UpdateWorkflowDataRequest.validators:type_name -> skip.ironbird.Node
	13, // 17: skip.ironbird.UpdateWorkflowDataRequest.wallets:type_name -> skip.ironbird.WalletInfo
	15, // 18: skip.ironbird.WorkflowListResponse.workflows:type_name -> skip.ironbird.WorkflowSummary
	0,  // 19: skip.ironbird.IronbirdService.CreateWorkflow:input_type -> skip.ironbird.CreateWorkflowRequest
	6,  // 20: skip.ironbird.IronbirdService.GetWorkflow:input_type -> skip.ironbird.GetWorkflowRequest
	7,  // 21: skip.ironbird.IronbirdService.ListWorkflows:input_type -> skip.ironbird.ListWorkflowsRequest
	8,  // 22: skip.ironbird.IronbirdService.CancelWorkflow:input_type -> skip.ironbird.CancelWorkflowRequest
	9,  // 23: skip.ironbird.IronbirdService.SignalWorkflow:input_type -> skip.ironbird.SignalWorkflowRequest
	10, // 24: skip.ironbird.IronbirdService.RunLoadTest:input_type -> skip.ironbird.RunLoadTestRequest
	16, // 25: skip.ironbird.IronbirdService.UpdateWorkflowData:input_type -> skip.ironbird.UpdateWorkflowDataRequest
	11, // 26: skip.ironbird.IronbirdService.CreateWorkflow:output_type -> skip.ironbird.WorkflowResponse
	14, // 27: skip.ironbird.IronbirdService.GetWorkflow:output_type -> skip.ironbird.Workflow
	17, // 28: skip.ironbird.IronbirdService.ListWorkflows:output_type -> skip.ironbird.WorkflowListResponse
	11, // 29: skip.ironbird.IronbirdService.CancelWorkflow:output_type -> skip.ironbird.WorkflowResponse
	11, // 30: skip.ironbird.IronbirdService.SignalWorkflow:output_type -> skip.ironbird.WorkflowResponse
	11, // 31: skip.ironbird.IronbirdService.RunLoadTest:output_type -> skip.ironbird.WorkflowResponse
	11, // 32: skip.ironbird.IronbirdService.UpdateWorkflowData:output_type -> skip.ironbird.WorkflowResponse
	26, // [26:33] is the sub-list for method output_type
	19, // [19:26] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_server_proto_ironbird_proto_init() }
func file_server_proto_ironbird_proto_init() {
	if File_server_proto_ironbird_proto != nil {
		return
	}
	file_server_proto_ironbird_proto_msgTypes[14].OneofWrappers = []any{}
	file_server_proto_ironbird_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_proto_ironbird_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_proto_ironbird_proto_goTypes,
		DependencyIndexes: file_server_proto_ironbird_proto_depIdxs,
		MessageInfos:      file_server_proto_ironbird_proto_msgTypes,
	}.Build()
	File_server_proto_ironbird_proto = out.File
	file_server_proto_ironbird_proto_rawDesc = nil
	file_server_proto_ironbird_proto_goTypes = nil
	file_server_proto_ironbird_proto_depIdxs = nil
}
