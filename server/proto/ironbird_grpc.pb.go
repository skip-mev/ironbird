// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: server/proto/ironbird.proto

package ironbird

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IronbirdService_CreateWorkflow_FullMethodName          = "/skip.ironbird.IronbirdService/CreateWorkflow"
	IronbirdService_GetWorkflow_FullMethodName             = "/skip.ironbird.IronbirdService/GetWorkflow"
	IronbirdService_ListWorkflows_FullMethodName           = "/skip.ironbird.IronbirdService/ListWorkflows"
	IronbirdService_CancelWorkflow_FullMethodName          = "/skip.ironbird.IronbirdService/CancelWorkflow"
	IronbirdService_SignalWorkflow_FullMethodName          = "/skip.ironbird.IronbirdService/SignalWorkflow"
	IronbirdService_RunLoadTest_FullMethodName             = "/skip.ironbird.IronbirdService/RunLoadTest"
	IronbirdService_UpdateWorkflowData_FullMethodName      = "/skip.ironbird.IronbirdService/UpdateWorkflowData"
	IronbirdService_CreateWorkflowTemplate_FullMethodName  = "/skip.ironbird.IronbirdService/CreateWorkflowTemplate"
	IronbirdService_GetWorkflowTemplate_FullMethodName     = "/skip.ironbird.IronbirdService/GetWorkflowTemplate"
	IronbirdService_ListWorkflowTemplates_FullMethodName   = "/skip.ironbird.IronbirdService/ListWorkflowTemplates"
	IronbirdService_UpdateWorkflowTemplate_FullMethodName  = "/skip.ironbird.IronbirdService/UpdateWorkflowTemplate"
	IronbirdService_DeleteWorkflowTemplate_FullMethodName  = "/skip.ironbird.IronbirdService/DeleteWorkflowTemplate"
	IronbirdService_ExecuteWorkflowTemplate_FullMethodName = "/skip.ironbird.IronbirdService/ExecuteWorkflowTemplate"
	IronbirdService_GetTemplateRunHistory_FullMethodName   = "/skip.ironbird.IronbirdService/GetTemplateRunHistory"
)

// IronbirdServiceClient is the client API for IronbirdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IronbirdServiceClient interface {
	CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error)
	ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*WorkflowListResponse, error)
	CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	SignalWorkflow(ctx context.Context, in *SignalWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	RunLoadTest(ctx context.Context, in *RunLoadTestRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	UpdateWorkflowData(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	CreateWorkflowTemplate(ctx context.Context, in *CreateWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplateResponse, error)
	GetWorkflowTemplate(ctx context.Context, in *GetWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplate, error)
	ListWorkflowTemplates(ctx context.Context, in *ListWorkflowTemplatesRequest, opts ...grpc.CallOption) (*WorkflowTemplateListResponse, error)
	UpdateWorkflowTemplate(ctx context.Context, in *UpdateWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplateResponse, error)
	DeleteWorkflowTemplate(ctx context.Context, in *DeleteWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplateResponse, error)
	ExecuteWorkflowTemplate(ctx context.Context, in *ExecuteWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowResponse, error)
	GetTemplateRunHistory(ctx context.Context, in *GetTemplateRunHistoryRequest, opts ...grpc.CallOption) (*TemplateRunHistoryResponse, error)
}

type ironbirdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIronbirdServiceClient(cc grpc.ClientConnInterface) IronbirdServiceClient {
	return &ironbirdServiceClient{cc}
}

func (c *ironbirdServiceClient) CreateWorkflow(ctx context.Context, in *CreateWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, IronbirdService_CreateWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) GetWorkflow(ctx context.Context, in *GetWorkflowRequest, opts ...grpc.CallOption) (*Workflow, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Workflow)
	err := c.cc.Invoke(ctx, IronbirdService_GetWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) ListWorkflows(ctx context.Context, in *ListWorkflowsRequest, opts ...grpc.CallOption) (*WorkflowListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowListResponse)
	err := c.cc.Invoke(ctx, IronbirdService_ListWorkflows_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) CancelWorkflow(ctx context.Context, in *CancelWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, IronbirdService_CancelWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) SignalWorkflow(ctx context.Context, in *SignalWorkflowRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, IronbirdService_SignalWorkflow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) RunLoadTest(ctx context.Context, in *RunLoadTestRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, IronbirdService_RunLoadTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) UpdateWorkflowData(ctx context.Context, in *UpdateWorkflowDataRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, IronbirdService_UpdateWorkflowData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) CreateWorkflowTemplate(ctx context.Context, in *CreateWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowTemplateResponse)
	err := c.cc.Invoke(ctx, IronbirdService_CreateWorkflowTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) GetWorkflowTemplate(ctx context.Context, in *GetWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowTemplate)
	err := c.cc.Invoke(ctx, IronbirdService_GetWorkflowTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) ListWorkflowTemplates(ctx context.Context, in *ListWorkflowTemplatesRequest, opts ...grpc.CallOption) (*WorkflowTemplateListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowTemplateListResponse)
	err := c.cc.Invoke(ctx, IronbirdService_ListWorkflowTemplates_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) UpdateWorkflowTemplate(ctx context.Context, in *UpdateWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowTemplateResponse)
	err := c.cc.Invoke(ctx, IronbirdService_UpdateWorkflowTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) DeleteWorkflowTemplate(ctx context.Context, in *DeleteWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowTemplateResponse)
	err := c.cc.Invoke(ctx, IronbirdService_DeleteWorkflowTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) ExecuteWorkflowTemplate(ctx context.Context, in *ExecuteWorkflowTemplateRequest, opts ...grpc.CallOption) (*WorkflowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorkflowResponse)
	err := c.cc.Invoke(ctx, IronbirdService_ExecuteWorkflowTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ironbirdServiceClient) GetTemplateRunHistory(ctx context.Context, in *GetTemplateRunHistoryRequest, opts ...grpc.CallOption) (*TemplateRunHistoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TemplateRunHistoryResponse)
	err := c.cc.Invoke(ctx, IronbirdService_GetTemplateRunHistory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IronbirdServiceServer is the server API for IronbirdService service.
// All implementations must embed UnimplementedIronbirdServiceServer
// for forward compatibility.
type IronbirdServiceServer interface {
	CreateWorkflow(context.Context, *CreateWorkflowRequest) (*WorkflowResponse, error)
	GetWorkflow(context.Context, *GetWorkflowRequest) (*Workflow, error)
	ListWorkflows(context.Context, *ListWorkflowsRequest) (*WorkflowListResponse, error)
	CancelWorkflow(context.Context, *CancelWorkflowRequest) (*WorkflowResponse, error)
	SignalWorkflow(context.Context, *SignalWorkflowRequest) (*WorkflowResponse, error)
	RunLoadTest(context.Context, *RunLoadTestRequest) (*WorkflowResponse, error)
	UpdateWorkflowData(context.Context, *UpdateWorkflowDataRequest) (*WorkflowResponse, error)
	CreateWorkflowTemplate(context.Context, *CreateWorkflowTemplateRequest) (*WorkflowTemplateResponse, error)
	GetWorkflowTemplate(context.Context, *GetWorkflowTemplateRequest) (*WorkflowTemplate, error)
	ListWorkflowTemplates(context.Context, *ListWorkflowTemplatesRequest) (*WorkflowTemplateListResponse, error)
	UpdateWorkflowTemplate(context.Context, *UpdateWorkflowTemplateRequest) (*WorkflowTemplateResponse, error)
	DeleteWorkflowTemplate(context.Context, *DeleteWorkflowTemplateRequest) (*WorkflowTemplateResponse, error)
	ExecuteWorkflowTemplate(context.Context, *ExecuteWorkflowTemplateRequest) (*WorkflowResponse, error)
	GetTemplateRunHistory(context.Context, *GetTemplateRunHistoryRequest) (*TemplateRunHistoryResponse, error)
	mustEmbedUnimplementedIronbirdServiceServer()
}

// UnimplementedIronbirdServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIronbirdServiceServer struct{}

func (UnimplementedIronbirdServiceServer) CreateWorkflow(context.Context, *CreateWorkflowRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflow not implemented")
}
func (UnimplementedIronbirdServiceServer) GetWorkflow(context.Context, *GetWorkflowRequest) (*Workflow, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedIronbirdServiceServer) ListWorkflows(context.Context, *ListWorkflowsRequest) (*WorkflowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedIronbirdServiceServer) CancelWorkflow(context.Context, *CancelWorkflowRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWorkflow not implemented")
}
func (UnimplementedIronbirdServiceServer) SignalWorkflow(context.Context, *SignalWorkflowRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignalWorkflow not implemented")
}
func (UnimplementedIronbirdServiceServer) RunLoadTest(context.Context, *RunLoadTestRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunLoadTest not implemented")
}
func (UnimplementedIronbirdServiceServer) UpdateWorkflowData(context.Context, *UpdateWorkflowDataRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowData not implemented")
}
func (UnimplementedIronbirdServiceServer) CreateWorkflowTemplate(context.Context, *CreateWorkflowTemplateRequest) (*WorkflowTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkflowTemplate not implemented")
}
func (UnimplementedIronbirdServiceServer) GetWorkflowTemplate(context.Context, *GetWorkflowTemplateRequest) (*WorkflowTemplate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkflowTemplate not implemented")
}
func (UnimplementedIronbirdServiceServer) ListWorkflowTemplates(context.Context, *ListWorkflowTemplatesRequest) (*WorkflowTemplateListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkflowTemplates not implemented")
}
func (UnimplementedIronbirdServiceServer) UpdateWorkflowTemplate(context.Context, *UpdateWorkflowTemplateRequest) (*WorkflowTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkflowTemplate not implemented")
}
func (UnimplementedIronbirdServiceServer) DeleteWorkflowTemplate(context.Context, *DeleteWorkflowTemplateRequest) (*WorkflowTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkflowTemplate not implemented")
}
func (UnimplementedIronbirdServiceServer) ExecuteWorkflowTemplate(context.Context, *ExecuteWorkflowTemplateRequest) (*WorkflowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecuteWorkflowTemplate not implemented")
}
func (UnimplementedIronbirdServiceServer) GetTemplateRunHistory(context.Context, *GetTemplateRunHistoryRequest) (*TemplateRunHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTemplateRunHistory not implemented")
}
func (UnimplementedIronbirdServiceServer) mustEmbedUnimplementedIronbirdServiceServer() {}
func (UnimplementedIronbirdServiceServer) testEmbeddedByValue()                         {}

// UnsafeIronbirdServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IronbirdServiceServer will
// result in compilation errors.
type UnsafeIronbirdServiceServer interface {
	mustEmbedUnimplementedIronbirdServiceServer()
}

func RegisterIronbirdServiceServer(s grpc.ServiceRegistrar, srv IronbirdServiceServer) {
	// If the following call pancis, it indicates UnimplementedIronbirdServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IronbirdService_ServiceDesc, srv)
}

func _IronbirdService_CreateWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).CreateWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_CreateWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).CreateWorkflow(ctx, req.(*CreateWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_GetWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).GetWorkflow(ctx, req.(*GetWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_ListWorkflows_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).ListWorkflows(ctx, req.(*ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_CancelWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).CancelWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_CancelWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).CancelWorkflow(ctx, req.(*CancelWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_SignalWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignalWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).SignalWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_SignalWorkflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).SignalWorkflow(ctx, req.(*SignalWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_RunLoadTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunLoadTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).RunLoadTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_RunLoadTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).RunLoadTest(ctx, req.(*RunLoadTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_UpdateWorkflowData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).UpdateWorkflowData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_UpdateWorkflowData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).UpdateWorkflowData(ctx, req.(*UpdateWorkflowDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_CreateWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).CreateWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_CreateWorkflowTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).CreateWorkflowTemplate(ctx, req.(*CreateWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_GetWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).GetWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_GetWorkflowTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).GetWorkflowTemplate(ctx, req.(*GetWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_ListWorkflowTemplates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkflowTemplatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).ListWorkflowTemplates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_ListWorkflowTemplates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).ListWorkflowTemplates(ctx, req.(*ListWorkflowTemplatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_UpdateWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).UpdateWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_UpdateWorkflowTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).UpdateWorkflowTemplate(ctx, req.(*UpdateWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_DeleteWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).DeleteWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_DeleteWorkflowTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).DeleteWorkflowTemplate(ctx, req.(*DeleteWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_ExecuteWorkflowTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecuteWorkflowTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).ExecuteWorkflowTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_ExecuteWorkflowTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).ExecuteWorkflowTemplate(ctx, req.(*ExecuteWorkflowTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IronbirdService_GetTemplateRunHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTemplateRunHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IronbirdServiceServer).GetTemplateRunHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IronbirdService_GetTemplateRunHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IronbirdServiceServer).GetTemplateRunHistory(ctx, req.(*GetTemplateRunHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IronbirdService_ServiceDesc is the grpc.ServiceDesc for IronbirdService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IronbirdService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "skip.ironbird.IronbirdService",
	HandlerType: (*IronbirdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorkflow",
			Handler:    _IronbirdService_CreateWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _IronbirdService_GetWorkflow_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _IronbirdService_ListWorkflows_Handler,
		},
		{
			MethodName: "CancelWorkflow",
			Handler:    _IronbirdService_CancelWorkflow_Handler,
		},
		{
			MethodName: "SignalWorkflow",
			Handler:    _IronbirdService_SignalWorkflow_Handler,
		},
		{
			MethodName: "RunLoadTest",
			Handler:    _IronbirdService_RunLoadTest_Handler,
		},
		{
			MethodName: "UpdateWorkflowData",
			Handler:    _IronbirdService_UpdateWorkflowData_Handler,
		},
		{
			MethodName: "CreateWorkflowTemplate",
			Handler:    _IronbirdService_CreateWorkflowTemplate_Handler,
		},
		{
			MethodName: "GetWorkflowTemplate",
			Handler:    _IronbirdService_GetWorkflowTemplate_Handler,
		},
		{
			MethodName: "ListWorkflowTemplates",
			Handler:    _IronbirdService_ListWorkflowTemplates_Handler,
		},
		{
			MethodName: "UpdateWorkflowTemplate",
			Handler:    _IronbirdService_UpdateWorkflowTemplate_Handler,
		},
		{
			MethodName: "DeleteWorkflowTemplate",
			Handler:    _IronbirdService_DeleteWorkflowTemplate_Handler,
		},
		{
			MethodName: "ExecuteWorkflowTemplate",
			Handler:    _IronbirdService_ExecuteWorkflowTemplate_Handler,
		},
		{
			MethodName: "GetTemplateRunHistory",
			Handler:    _IronbirdService_GetTemplateRunHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server/proto/ironbird.proto",
}
